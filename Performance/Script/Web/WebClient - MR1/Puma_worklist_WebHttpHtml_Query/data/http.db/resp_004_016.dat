//Trim String
String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, "");
};

String.prototype.trimEnd = function () {
    return this.replace(/\s+$/g, "");
};


//To Camel Case
String.prototype.toCamel = function () {
    return this.replace(/(\-[a-z])/g, function ($1) { return $1.toUpperCase().replace('-', ''); });
};

//To Dashed from Camel Case
String.prototype.toDash = function () {
    return this.replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); });
};

//To Underscore from Camel Case
String.prototype.toUnderscore = function () {
    return this.replace(/([A-Z])/g, function ($1) { return "_" + $1.toLowerCase(); });
};

String.prototype.startsWith = function (prefix) {
    return this.slice(0, prefix.length) === prefix;
};

String.prototype.endsWith = function (suffix) {
    return this.indexOf(suffix, this.length - suffix.length) !== -1;
};

Date.prototype.Format = function (fmt) {
    var o = {
        "M+": this.getMonth() + 1, //月份 
        "d+": this.getDate(), //日 
        "h+": this.getHours(), //小时 
        "m+": this.getMinutes(), //分 
        "s+": this.getSeconds(), //秒 
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
        "S": this.getMilliseconds() //毫秒 
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
        }
    }
    return fmt;
}

if (!Array.prototype.find) {
    Array.prototype.find = function (predicate) {
        'use strict';
        if (this == null) {
            throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
            throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;

        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return value;
            }
        }
        return undefined;
    };
}

function downloadFile(filePath) {
    var downloadLink = angular.element('<a></a>');
    downloadLink.attr('href', '/' + filePath);
    var paths = filePath.split("\\");
    downloadLink.attr('download', paths[paths.length - 1]);
    downloadLink.attr('target', '_blank');
    var evt = document.createEvent("MouseEvents");
    evt.initEvent("click", true, true);
    downloadLink[0].dispatchEvent(evt);
};

function sortNumber(a, b) {
    return a - b;
};

function sortObject(key, desc) {
    return function (a, b) {
        return desc ? (a[key] - b[key]) : (a[key] - b[key]);
    }
};